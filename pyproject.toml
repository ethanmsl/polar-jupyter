[tool.poetry]
name = "polar-jupyter"
version = "0.1.0"
description = "Scratchspace for exploring Polars with Python & Jupyter"
authors = ["Ethan Skowronski-Lutz <33399972+ethanmsl@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
polars = "^0.19.5"
jupyterlab = "^4.0.6"
jupytext = "^1.15.2"
matplotlib = "^3.8.0"
ipywidgets = "^8.1.1"
sympy = "^1.12"
python-dotenv = "^1.0.0"
httpx = "^0.25.2"
structlog = "^23.2.0"
pydantic = "^2.5.2"
arrow = "^1.3.0"


[tool.poetry.group.dev.dependencies]
bandit = "^1.7.5"
black = "^23.9.1"
isort = "^5.12.0"
pdoc = "^14.1.0"
pylint = "^2.17.6"
pyright = "^1.1.329"
pytest = "^7.4.2"
pytest-cov = "^4.1.0"
ruff = "^0.0.291"
ruff-lsp = "^0.0.39"
ipykernel = "^6.25.2"
hypothesis = "^6.91.1"


[tool.poetry.group.user.dependencies]
polars = "^0.19.19"
jupyterlab = "^4.0.9"
notebook = "^7.0.6"
jupytext = "^1.16.0"
matplotlib = "^3.8.2"
seaborn = "^0.13.0"
numpy = "^1.26.2"
scipy = "^1.11.4"
sympy = "^1.12"
ipywidgets = "^8.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.isort]
# compatibility with Black formatter
profile = "black"


[tool.pylint]
disable = [
        # "C0303",  # trailing-whitespace -- interferes with docstring markdown
        "R0903", # too-few-public-methods -- interferes with type capture of program logic
]

[tool.pylint.format]
# line length to match Black formatter
max-line-length = "88"


[tool.pyright]
include = ["src"]
exclude = [".venv", "src/experimental", "src/typestubs", "**/__pycache__"]
# utilizing the fact that we've set Poetry `virtualenv.in-project` to true
venvPath = "."
venv = ".venv"

typeCheckingMode = "basic"    # "off", "basic", "strict"
reportMissingImports = true
reportMissingTypeStubs = true

executionEnvironments = [{ root = "src" }]


[tool.pytest.ini_options]
# adds the following paths to pythonpath, specified relative to root dir
addopts = "--doctest-modules" # run doctests
pythonpath = ["src"]


[tool.ruff]
# Allow imports relative to the "src" and "test" directories.
src = ["src", "tests"]

# warn, but recommend restructuring for unused `__init__.py` module imports
ignore-init-module-imports = true

select = ["ALL"]
ignore = [
        "D203", # One blank line before class -- conflicts with "D211"
        "D213", # Multiline docstrings start on second line -- conflicts with "D212"
]

[tool.ruff.extend-per-file-ignores]
# ignore these lints in a file that will be specifying CLI args (via Typer decorators)
"commands.py" = [
        "FBT001", # No `bool` params -- used to specify CLI arguments with Typer module
        "FBT002", # No `bool` param defaults -- CLI argument values in Typer module
        "UP007",  # No `Option[..]` Type-syntax -- used by Typer module
]
# ignore these lints in a file that will be testing CLI arg defining functions
"test_commands.py" = [
        "FBT003", # No `bool` in func calls -- functions being tested represent CLI args
]
# ignore these lints in all test files
"test_*.py" = [
        "S101",    # Use of `assert` -- intended in tests files
        "PLR2004", # Magic Value used in comparison -- impractical rule in test files
]
# ignore these lints in a file conversion to a Jupyter Notebook ("jupytext file")
"*.ju.py" = [
        "D100",   # "Missing Docstring in Public Module" -- not use of ju.py
        "E402",   # "module level import not at top of file"
        "ERA001", # "commented out code" - this can be confused by jupytext syntax
        "I001",   # "Import Block Unformated" -- imports are placed differently in jupyter files
        "T201",   # "print found"
]
